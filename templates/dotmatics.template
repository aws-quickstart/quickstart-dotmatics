---
AWSTemplateFormatVersion: 2010-09-09
Description: Launches a Dotmatics application server and database.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Dotmatics Configuration
      Parameters:
      - pDNSName
    - Label:
        default: Network Configuration
      Parameters:
      - pVpcId
      - pDmzSubnetA
      - pDmzSubnetB
      - pAppSubnetA
      - pAppSubnetB
      - pDBSubnetA
      - pDBSubnetB
      - pDnsHostedZoneID
      - pDnsHostedZoneApexDomain
      - pLoadBalancerType
      - pSecurityGroupForWebAccess
      - pWebAccessCIDR
    - Label:
        default: Amazon EC2 Configuration
      Parameters:
      - pEC2KeyPair
      - pAppServerInstanceType
    - Label:
        default: Amazon RDS Configuration
      Parameters:
      - pDBName
      - pDBUsername
      - pDBPassword
      - pDBInstanceType
      - pDBMultiAZ
    ParameterLabels:
      pAppServerInstanceType:
        default: App Server Instance Type
      pAppSubnetA:
        default: Application Subnet A
      pAppSubnetB:
        default: Application Subnet B
      pDBInstanceType:
        default: Database Instance Type
      pDBMultiAZ:
        default: Multi-AZ Amazon RDS
      pDBName:
        default: Database Name
      pDBPassword:
        default: Database Password
      pDBSubnetA:
        default: Database Subnet A
      pDBSubnetB:
        default: Database Subnet B
      pDBUsername:
        default: Database User/Owner
      pDmzSubnetA:
        default: DMZ Subnet A
      pDmzSubnetB:
        default: DMZ Subnet B
      pDnsHostedZoneApexDomain:
        default: Internal DNS Apex Domain
      pDnsHostedZoneID:
        default: Internal DNS hosted zone ID
      pDNSName: 
        default: Dotmatics Server DNS Name
      pEC2KeyPair:
        default: Key Pair for Dotmatics Server
      pLoadBalancerType:
        default: Load Balancer Type
      pSecurityGroupForWebAccess:
        default: Web Access Security Group
      pVpcId:
        default: VPC for Deployment
      pWebAccessCIDR:
        default: Web Access CIDR (No SG)
       
Parameters:
  pDNSName:
    Description: The internal DNS CNAME to be used for the Dotmatics server. Leave the default if you are unsure of what this does.
    Type: String
    Default: dotmatics
  pAppServerInstanceType:
    Description: Dotmatics app server EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues: 
      - t2.medium
      - t2.large
      - t2.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
  pAppSubnetA:
    Description: Production App Subnet A. Target subnet for the app server. 
    Type: AWS::EC2::Subnet::Id
  pAppSubnetB:
    Description: Production App Subnet B. Target subnet for the app server. 
    Type: AWS::EC2::Subnet::Id
  pDBInstanceType:
    Description: Database instance class. Default is db.t2.large.
    Type: String
    Default: t2.large
    AllowedValues: 
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
  pDBMultiAZ:
    Description: Multi-AZ Amazon RDS Configuration. true/false - default is false.
    Type: String
    AllowedValues:
    - "true"
    - "false"
    Default: "false"
  pDBName:
    Description: Dotmatics Database Name
    Type: String
    Default: Dotmatics
  pDBPassword:
    Description: Database User/Owner Password
    Type: String
    NoEcho: true
  pDBSubnetA:
    Description: Subnet ID for Production DB Subnet A.
    Type: AWS::EC2::Subnet::Id
  pDBSubnetB:
    Description: Subnet ID for Production DB Subnet B.
    Type: AWS::EC2::Subnet::Id
  pDBUsername:
    Description: Database User/Owner
    Type: String
    Default: mosaicowner
  pDmzSubnetA:
    Description: Production DMZ Subnet A. Target subnet for the app server. 
    Type: AWS::EC2::Subnet::Id
  pDmzSubnetB:
    Description: Production DMZ Subnet B. Target subnet for the app server. 
    Type: AWS::EC2::Subnet::Id
  pDnsHostedZoneApexDomain:
    Description: (Optional) Internal DNS Apex Domain
    Type: String
    Default: ""
  pDnsHostedZoneID:
    Description: (Optional) Internal DNS hosted zone ID.
    Type: String
    Default: ""
  pEC2KeyPair:
    Description: Key Name for app and db server.
    Type: AWS::EC2::KeyPair::KeyName  
  pLoadBalancerType:
    Default: internet-facing
    Type: String
    AllowedValues: 
      - internet-facing
      - internal
  pSecurityGroupForWebAccess:
    Description: Security group for web access
    Type: String
    Default: ""
  pVpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  pWebAccessCIDR:
    Description: Will only be used if Web Access Security Group is not specified. Enter 0.0.0.0/0 if you want to open it to the world.
    Type: String
    Default: "10.0.0.0/16"

Mappings:
  AWSAMIRegionMap:
    us-east-1:
      mAppServerAMI: ami-XXXXXXXXXXX
      mDbServerAMI: ami-XXXXXXXXXXX
    us-west-2:
      mAppServerAMI: ami-XXXXXXXXXXX
      mDbServerAMI: ami-XXXXXXXXXXX
    eu-west-1:
      mAppServerAMI: ami-0f504c691c15fa25a 
      mDbServerAMI: ami-0c1e590729f5ae76a

Conditions:
  cDNSRecord: !Not [ !Or [ !Equals [!Ref pDnsHostedZoneID, ""] , !Equals [!Ref pDnsHostedZoneApexDomain, ""] ] ]
  cWebAccessSG: !Not [ !Equals [ !Ref pSecurityGroupForWebAccess, "" ] ]
  cNoWebAccessSG: !Equals [ !Ref pSecurityGroupForWebAccess, "" ]
Resources:
  # If a hosted zone is specified, create a DNS Record
  rDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: cDNSRecord
    Properties:
      HostedZoneId: !Ref pDnsHostedZoneID
      Comment: Internal DNS CNAME for Dotmatics.
      Name: !Sub ${pDNSName}.${pDnsHostedZoneApexDomain}
      Type: CNAME 
      TTL: 60
      ResourceRecords:
        - !GetAtt rApplicationLoadBalancer.DNSName

  rALBCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Condition: cDNSRecord
    Properties: 
      DomainName: !Sub ${pDNSName}.${pDnsHostedZoneApexDomain}
      DomainValidationOptions:
      - DomainName: !Sub ${pDNSName}.${pDnsHostedZoneApexDomain}
        ValidationDomain: !Ref pDnsHostedZoneApexDomain

  ###
  ### Security Groups
  ###
  rSecurityGroupAppServers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Dotmatics App Servers.
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: sg-dotmatics-appserver
  rSecurityGroupAppServersIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref rSecurityGroupAppServers
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref rSecurityGroupAlbs
  rSecurityGroupAppServersIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref rSecurityGroupAppServers
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref rSecurityGroupAlbs
  rSecurityGroupAlbWithSG: 
    Type: AWS::EC2::SecurityGroup
    Condition: cWebAccessSG
    Properties: 
      GroupDescription: Allow access to Dotmatics ALBs. Open to SG.
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref pSecurityGroupForWebAccess
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref pSecurityGroupForWebAccess
      Tags: 
      - Key: Name
        Value: sg-dotmatics-access-ports-to-alb-bysg
  rSecurityGroupAlbNoSG:
    Type: AWS::EC2::SecurityGroup
    Condition: cNoWebAccessSG
    Properties:
      GroupDescription: Allow access to Dotmatics ALB. Open to CIDR.
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pWebAccessCIDR
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pWebAccessCIDR
      Tags:
      - Key: Name
        Value: sg-dotmatics-access-ports-to-alb-bycidr
  rSecurityGroupAlbs:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Dotmatics ALBs.
      VpcId: !Ref pVpcId
      Tags:
      - Key: Name
        Value: sg-dotmatics-alb
  rSecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Dotmatics DB from Dotmatics App Server or other integration points 
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          SourceSecurityGroupId: !Ref rSecurityGroupAppServers

  ###
  ### Application Load Balancer
  ###
  rApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref pLoadBalancerType
      SecurityGroups:
        - !Ref rSecurityGroupAlbs
        - !If [ cWebAccessSG, !Ref rSecurityGroupAlbWithSG, !Ref rSecurityGroupAlbNoSG ]
      Subnets:
        - !Ref pDmzSubnetA
        - !Ref pDmzSubnetB
      Tags:
        - Key: Name
          Value: "Dotmatics ALB"
      Type: application
      
  rLoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        LoadBalancerArn: !Ref rApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions: 
            - Type: forward
              TargetGroupArn: !Ref rLoadBalancerTargetGroupHTTP
      
  rLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: cDNSRecord
    Properties:
        Certificates:
          - CertificateArn: !Ref rALBCertificate
        LoadBalancerArn: !Ref rApplicationLoadBalancer
        Port: 443
        Protocol: HTTPS 
        DefaultActions: 
            - Type: forward
              TargetGroupArn: !Ref rLoadBalancerTargetGroupHTTPS
  
  rLoadBalancerTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        VpcId: !Ref pVpcId
        HealthCheckPath: '/browser'
        Port: 80
        HealthCheckIntervalSeconds: 180
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2  
        HealthCheckPort: 80
        UnhealthyThresholdCount: 10
        Protocol: HTTP
        Matcher: 
          HttpCode: '200,302'
  
  rLoadBalancerTargetGroupHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        VpcId: !Ref pVpcId
        Port: 80
        HealthCheckPath: '/browser'
        HealthCheckIntervalSeconds: 180
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2  
        HealthCheckPort: 80
        UnhealthyThresholdCount: 10
        Protocol: HTTP
        Matcher: 
          HttpCode: '200,401,302'



  ###
  ### Auto Scaling Group
  ###
  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      AutoScalingGroupName: !Sub Dotmatics-ASG-${AWS::StackName}
      TargetGroupARNs:
        - !Ref rLoadBalancerTargetGroupHTTPS
        - !Ref rLoadBalancerTargetGroupHTTP
      VPCZoneIdentifier:
        - !Ref pAppSubnetA
        - !Ref pAppSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigApp
      MinSize: 1
      MaxSize: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 900
      Tags:
        - Key: Name
          Value: "Dotmatics AppServer"
          PropagateAtLaunch: true
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - rDatabaseInstance
    Properties:
      ImageId: !FindInMap [ AWSAMIRegionMap, !Ref "AWS::Region", mAppServerAMI ]
      InstanceType: !Ref pAppServerInstanceType
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
      - !Ref rSecurityGroupAppServers
      UserData:
        Fn::Base64: !Sub |
          #!/bin/sh
          sed -i '/^db.description/s/=.*$/=(DESCRIPTION\\=(ADDRESS\\=(PROTOCOL\\=TCP)(HOST\\=${rDatabaseInstance.PrivateDnsName})(PORT\\=1521))(CONNECT_DATA\\=(SERVICE_NAME\\=PDBDOTM)) )/' /ebs/config/browser/browser.properties 
          sed -i '/^db.server/s/=.*$/=${rDatabaseInstance.PrivateDnsName}/' /ebs/config/browser/browser.properties 
          
          if [ '${pDnsHostedZoneID}' = '' ]
            then
              sed -i '/^app.browserurl/s/=.*$/=${rApplicationLoadBalancer.DNSName}/' /ebs/config/browser/browser.properties 
            else 
              sed -i '/^app.browserurl/s/=.*$/=${pDNSName}.${pDnsHostedZoneApexDomain}/' /ebs/config/browser/browser.properties 
          fi
          
          sudo systemctl stop browser.service
          sudo systemctl start browser.service


  ###
  ### DB Instance
  ###
  

  rDatabaseInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      DisableApiTermination: true
      InstanceType: !Ref pDBInstanceType
      IamInstanceProfile: !Ref rDBServerProfile
      KeyName: !Ref pEC2KeyPair
      ImageId: !FindInMap [ AWSAMIRegionMap, !Ref "AWS::Region", mDbServerAMI ]  
      NetworkInterfaces: 
      - AssociatePublicIpAddress: false
        DeviceIndex: 0
        GroupSet: 
          - !Ref rSecurityGroupDB
        SubnetId: !Ref pDBSubnetA
      Tags: 
      - Key: Name
        Value: "Dotmatics Oracle Database"
      UserData: 
        Fn::Base64: !Sub |
          sudo systemctl start oracle.service
   
  
  rDBServerRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
        - Effect: Allow
          Principal:
            Service: 
            - ec2.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
  rDBServerProfile: 
    DependsOn: 
    - rDBServerRole
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
      - !Ref rDBServerRole  

Outputs:
  oLoadBalancerDNS:
    Description: DNS of Load Balancer to access Dotmatics
    Value: !Sub ${rApplicationLoadBalancer.DNSName}/browser
  oDNSUrl:
    Condition: cDNSRecord
    Description: URL to Load Balancer to access Dotmaics application.
    Value: !Sub https://${pDNSName}.${pDnsHostedZoneApexDomain}/browser